syntax = "proto3";
package vesta.vm;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "vesta/vm/params.proto";
import "vesta/vm/contracts.proto";
import "vesta/vm/program.proto";
import "vesta/vm/romdata.proto";
import "vesta/vm/cronjobs.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/VestaProtocol/vesta/x/vm/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/vesta/vm/params";
  }
  // Queries a Contracts by id.
  rpc Contracts(QueryGetContractsRequest) returns (QueryGetContractsResponse) {
    option (google.api.http).get = "/vesta/vm/contracts/{id}";
  }

  // Queries a list of Contracts items.
  rpc ContractsAll(QueryAllContractsRequest)
      returns (QueryAllContractsResponse) {
    option (google.api.http).get = "/vesta/vm/contracts";
  }

  // Queries a Program by index.
  rpc Program(QueryGetProgramRequest) returns (QueryGetProgramResponse) {
    option (google.api.http).get = "/vesta/vm/program/{name}";
  }

  // Queries a list of Program items.
  rpc ProgramAll(QueryAllProgramRequest) returns (QueryAllProgramResponse) {
    option (google.api.http).get = "/vesta/vm/program";
  }

  // Queries a Romdata by index.
  rpc Romdata(QueryGetRomdataRequest) returns (QueryGetRomdataResponse) {
    option (google.api.http).get = "/vesta/vm/romdata/{index}";
  }

  // Queries a list of Romdata items.
  rpc RomdataAll(QueryAllRomdataRequest) returns (QueryAllRomdataResponse) {
    option (google.api.http).get = "/vesta/vm/romdata";
  }

  // Queries a list of Detail items.
  rpc Detail(QueryDetailRequest) returns (QueryDetailResponse) {
    option (google.api.http).get = "/vesta/vm/detail/{name}/{query}/{args}";
  }

  // Queries a Cronjobs by index.
  rpc Cronjobs(QueryGetCronjobsRequest) returns (QueryGetCronjobsResponse) {
    option (google.api.http).get =
        "/VestaProtocol/vesta/vm/cronjobs/{contract}";
  }

  // Queries a list of Cronjobs items.
  rpc CronjobsAll(QueryAllCronjobsRequest) returns (QueryAllCronjobsResponse) {
    option (google.api.http).get = "/VestaProtocol/vesta/vm/cronjobs";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetContractsRequest { uint64 id = 1; }

message QueryGetContractsResponse {
  Contracts Contracts = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllContractsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllContractsResponse {
  repeated Contracts Contracts = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetProgramRequest { string name = 1; }

message QueryGetProgramResponse {
  Program program = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllProgramRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProgramResponse {
  repeated Program program = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRomdataRequest { string index = 1; }

message QueryGetRomdataResponse {
  Romdata romdata = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllRomdataRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRomdataResponse {
  repeated Romdata romdata = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDetailRequest {
  string name = 1;
  string query = 2;
  string args = 3;
}

message QueryDetailResponse { string response = 1; }

message QueryGetCronjobsRequest { string contract = 1; }

message QueryGetCronjobsResponse {
  Cronjobs cronjobs = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllCronjobsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCronjobsResponse {
  repeated Cronjobs cronjobs = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
