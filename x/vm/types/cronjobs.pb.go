// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesta/vm/cronjobs.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Cronjobs struct {
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Interval int64  `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *Cronjobs) Reset()         { *m = Cronjobs{} }
func (m *Cronjobs) String() string { return proto.CompactTextString(m) }
func (*Cronjobs) ProtoMessage()    {}
func (*Cronjobs) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ad2489ebb3f249e, []int{0}
}
func (m *Cronjobs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cronjobs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cronjobs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cronjobs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cronjobs.Merge(m, src)
}
func (m *Cronjobs) XXX_Size() int {
	return m.Size()
}
func (m *Cronjobs) XXX_DiscardUnknown() {
	xxx_messageInfo_Cronjobs.DiscardUnknown(m)
}

var xxx_messageInfo_Cronjobs proto.InternalMessageInfo

func (m *Cronjobs) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Cronjobs) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *Cronjobs) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func init() {
	proto.RegisterType((*Cronjobs)(nil), "vesta.vm.Cronjobs")
}

func init() { proto.RegisterFile("vesta/vm/cronjobs.proto", fileDescriptor_8ad2489ebb3f249e) }

var fileDescriptor_8ad2489ebb3f249e = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x4b, 0x2d, 0x2e,
	0x49, 0xd4, 0x2f, 0xcb, 0xd5, 0x4f, 0x2e, 0xca, 0xcf, 0xcb, 0xca, 0x4f, 0x2a, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x4b, 0xe8, 0x95, 0xe5, 0x2a, 0xc5, 0x71, 0x71, 0x38, 0x43,
	0xe5, 0x84, 0xa4, 0xb8, 0x38, 0x92, 0xf3, 0xf3, 0x4a, 0x8a, 0x12, 0x93, 0x4b, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x90, 0x5c, 0x5a, 0x69, 0x5e, 0x72, 0x49, 0x66, 0x7e, 0x9e,
	0x04, 0x13, 0x44, 0x0e, 0xc6, 0x07, 0xc9, 0x65, 0xe6, 0x95, 0xa4, 0x16, 0x95, 0x25, 0xe6, 0x48,
	0x30, 0x2b, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xf9, 0x4e, 0xce, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78,
	0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc,
	0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x99, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab,
	0x1f, 0x06, 0x72, 0x4e, 0x00, 0xc8, 0x69, 0xc9, 0xf9, 0x39, 0xfa, 0x10, 0x57, 0x57, 0x80, 0xdc,
	0x5d, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x76, 0xb5, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xb9, 0x32, 0xb9, 0x37, 0xd0, 0x00, 0x00, 0x00,
}

func (m *Cronjobs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cronjobs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cronjobs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintCronjobs(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintCronjobs(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintCronjobs(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCronjobs(dAtA []byte, offset int, v uint64) int {
	offset -= sovCronjobs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Cronjobs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovCronjobs(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovCronjobs(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovCronjobs(uint64(m.Interval))
	}
	return n
}

func sovCronjobs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCronjobs(x uint64) (n int) {
	return sovCronjobs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cronjobs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronjobs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cronjobs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cronjobs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjobs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjobs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjobs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjobs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronjobs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronjobs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronjobs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCronjobs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronjobs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCronjobs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCronjobs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronjobs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronjobs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCronjobs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCronjobs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCronjobs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCronjobs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCronjobs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCronjobs = fmt.Errorf("proto: unexpected end of group")
)
